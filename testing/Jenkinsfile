pipeline {
    agent any 
    stages {
        stage('Static Analysis') {
            steps {
                echo 'Run the static analysis to the code' 
            }
        }
        stage('Compile') {
            steps {
                echo 'Compile the source code' 
            }
        }
        stage('Security Check') {
            steps {
                echo 'Run the security check against the application' 
            }
        }
        stage('Run Unit Tests') {
            steps {
                echo 'Run unit tests from the source code' 
            }
        }
        stage('Run Integration Tests') {
            steps {
                echo 'Run only crucial integration tests from the source code' 
            }
        }
        stage('Publish Artifacts') {
            steps {
                echo 'Save the assemblies generated from the compilation' 
            }
        }

        stage('createImage') {
        steps { echo "Creating Dockerfile..."' }
        steps { echo "FROM ubuntu:bionic" > Dockerfile'}
        steps { echo "ENV MYSQL_HOST=DB_Server" >> Dockerfile' }
        steps { echo "ENV MYSQL_PASSWORD=5TTnvuTDJJSq6" >> Dockerfile' }
        steps { echo "LABEL description=Test_Twistlock_Jenkins_Plugin" >> Dockerfile' }
        steps { docker build --no-cache -t dev/my-ubuntu:$BUILD_NUMBER .'}
    }
    stage('twistlockScan') {
        prismaCloudScanImage ca: '', cert: '', dockerAddress: 'unix:///var/run/docker.sock', image: 'dev/my-ubuntu:$BUILD_NUMBER', key: '', logLevel: 'info', podmanPath: '', project: '', resultsFile: 'prisma-cloud-scan-results.json', ignoreImageBuildTime:true
    }
    stage('twistlockPublish') {
        prismaCloudPublish resultsFilePattern: 'prisma-cloud-scan-results.json'
    }

    }
}
